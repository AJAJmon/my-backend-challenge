// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: PieFireDire.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PieFireDire_Summary_FullMethodName = "/services.PieFireDire/Summary"
)

// PieFireDireClient is the client API for PieFireDire service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PieFireDireClient interface {
	Summary(ctx context.Context, in *BeefRequest, opts ...grpc.CallOption) (*BeefResponse, error)
}

type pieFireDireClient struct {
	cc grpc.ClientConnInterface
}

func NewPieFireDireClient(cc grpc.ClientConnInterface) PieFireDireClient {
	return &pieFireDireClient{cc}
}

func (c *pieFireDireClient) Summary(ctx context.Context, in *BeefRequest, opts ...grpc.CallOption) (*BeefResponse, error) {
	out := new(BeefResponse)
	err := c.cc.Invoke(ctx, PieFireDire_Summary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PieFireDireServer is the server API for PieFireDire service.
// All implementations must embed UnimplementedPieFireDireServer
// for forward compatibility
type PieFireDireServer interface {
	Summary(context.Context, *BeefRequest) (*BeefResponse, error)
	mustEmbedUnimplementedPieFireDireServer()
}

// UnimplementedPieFireDireServer must be embedded to have forward compatible implementations.
type UnimplementedPieFireDireServer struct {
}

func (UnimplementedPieFireDireServer) Summary(context.Context, *BeefRequest) (*BeefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Summary not implemented")
}
func (UnimplementedPieFireDireServer) mustEmbedUnimplementedPieFireDireServer() {}

// UnsafePieFireDireServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PieFireDireServer will
// result in compilation errors.
type UnsafePieFireDireServer interface {
	mustEmbedUnimplementedPieFireDireServer()
}

func RegisterPieFireDireServer(s grpc.ServiceRegistrar, srv PieFireDireServer) {
	s.RegisterService(&PieFireDire_ServiceDesc, srv)
}

func _PieFireDire_Summary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PieFireDireServer).Summary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PieFireDire_Summary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PieFireDireServer).Summary(ctx, req.(*BeefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PieFireDire_ServiceDesc is the grpc.ServiceDesc for PieFireDire service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PieFireDire_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.PieFireDire",
	HandlerType: (*PieFireDireServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Summary",
			Handler:    _PieFireDire_Summary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "PieFireDire.proto",
}
